name: nixbuild-ci

on:
  workflow_call:
    secrets:
      access-tokens:
        required: false
        description: |
          Access token to token protected flakes, for example private github repos.
          Example: github.com=23ac...b289
          See https://nixos.org/manual/nix/unstable/command-ref/conf-file.html#conf-access-tokens
          for more info.  
      nixbuild_ssh_key:
        required: false
        description: |
          The private SSH key used to authenticate with nixbuild.net. An alternative
          to SSH key authentication is to use token-based authentication by
          configuring the nixbuild_token setting. If a token is configured you can
          leave nixbuild_ssh_key unset, but one of the settings must be set in
          order for authentication to work.

          You should not add your private key directly to the workflow file but
          instead define a GitHub Secret for it, to avoid mistakenly sharing your
          key with others.

          It is advisable to create a new nixbuild.net SSH key specifically for
          use within GitHub (or even per repository or workflow). That way you can
          revoke access to your nixbuild.net account in a fine-grained fashion.

          See the README of this action for easy setup instructions.

      nixbuild_token:
        required: false
        description: |
          The private Biscuit token used to authenticate with nixbuild.net. If you
          use SSH key authentication (by configuring nixbuild_ssh_key) this setting
          can be unset, but one of the settings must be set in order for
          authentication to work.

          You should not add your private token directly to the workflow file but
          instead define a GitHub Secret for it, to avoid mistakenly sharing your
          token with others.

    outputs:
      success:
        value: ${{ jobs.summary.outputs.success }}
        description: |
          Outputs the string 'true' if all builds succeeded, otherwise 'false'.
          You need to set `ignore_build_failures` to `true` in order to get the
          'false' result, otherwise your workflow will be terminated before
          you can use this output.

      results:
        value: ${{ jobs.summary.outputs.results }}
        description: |
          Contains a JSON object that maps each build to its result. Look at the
          file `examples/using-the-ci-workflow/expected-result.json` to see an
          example.

    inputs:
      nix_version:
        type: string
        default: '2.14.1'
        required: false
        description: |
          The version of Nix that should be used.
          See available versions at
          https://github.com/nixbuild/nix-quick-install-action/releases/tag/v21.

      nix_conf:
        type: string
        default: ''
        required: false
        description: |
          Nix configuration passed to `nix-quick-install-action`.

      ignore_build_failures:
        type: boolean
        required: false
        default: false
        description: |
          If true, the workflow will not fail even if one or more builds fail.
          This is useful if you want to process the build results in a
          subsequent job. For an example of this, see the workflow in
          `.github/workflows/ci-example.yml`.

      fail_fast:
        type: boolean
        required: false
        default: false
        description: |
          If true, any remaining builds will be cancelled when the first build
          failure is found. If false, all builds will be attempted no matter how
          many builds fail. Note, `ignore_build_failures` must be false for this
          option have any effect. If `ignore_build_failures` is true, no builds
          will be cancelled.

      filter_builds:
        type: string
        required: false
        default: '.top_attr == "checks"'
        description: |
          A `jq` boolean expression that decides which builds from `flake.nix`
          to build. See the `jq` documentation for info on how to write boolean
          expressions: https://stedolan.github.io/jq/manual/.

          When evaluating the expression, the following fields will be
          available:

          .top_attr : Either "checks" or "packages"
          .system   : The build's system ("x86_64-linux", "aarch64-linux" etc)
          .attr     : The build's attribute name, as defined in your flake
          .name     : The build's derivation name

      label_builds:
        type: string
        required: false
        default: '"\(.attr) [\(.system)]"'
        description: |
          A `jq` string expression that defines the label of the build. The
          label is visible in the GitHub Actions UI.
          See the `jq` documentation for info on how to write string
          expressions: https://stedolan.github.io/jq/manual/.

          When evaluating the expression, the following fields will be
          available:

          .top_attr : Either "checks" or "packages"
          .system   : The build's system ("x86_64-linux", "aarch64-linux" etc)
          .attr     : The build's attribute name, as defined in your flake
          .name     : The build's derivation name

      flake_directory:
        type: string
        required: false
        default: '.'
        description: |
          The path to the directory in your repository that contains the
          `flake.nix` file you want the workflow to build.

      pre_evaluation_script:
        type: string
        required: false
        default: ''
        description: |
          Bash script that should be executed before evaluating the flake.

      pre_build_script:
        type: string
        required: false
        default: ''
        description: |
          Bash script that should be executed before running each build. Note,
          every build runs as a separate job so this script (and all builds)
          will be executed in parallel.

      generate_build_summary:
        type: boolean
        default: true
        description: |
          Generate a summary of all builds that has been running during the
          workflow. If you are using ci-workflow.yml multiple times in your
          workflow, it can make sense to disable this summary since otherwise
          you will get the same summary generated multiple times. In such cases,
          you can add an explicit summary job that runs after all other workflow
          jobs and uses nixbuild-action to generate the summary only one time.

      caches:
        type: string
        default: ''
        required: false
        description: |
          Set the caches setting in nixbuild.net. For documentation
          see https://docs.nixbuild.net/settings/#caches.
          Separate multiple caches with a comma.
          You must have corresponding access tokens setup in your account on
          nixbuild.net, see https://docs.nixbuild.net/settings/#access-tokens.

      reuse-build-failures:
        type: boolean
        default: true
        required: false
        description: |
          Set the reuse-build-failures setting in nixbuild.net. For
          documentation see
          https://docs.nixbuild.net/settings/#reuse-build-failures.

      reuse-build-timeouts:
        type: boolean
        default: false
        required: false
        description: |
          Set the reuse-build-timeouts setting in nixbuild.net. For
          documentation see
          https://docs.nixbuild.net/settings/#reuse-build-timeouts.

      lfs:
        type: boolean
        default: false
        required: false
        description: |
          Use git-lfs when checking out the repository for the build job. 
          See: https://github.com/actions/checkout
      
      remote_store:
        type: boolean
        default: true
        required: false
        description: |
          If remote store should be used, or instead remote builders.

jobs:

  eval-flake:
    name: "Evaluate flake"
    runs-on: ubuntu-latest
    outputs:
      builds: ${{ steps.find-builds.outputs.builds }}
    steps:
      - uses: actions/checkout@v3
      - uses: nixbuild/nix-quick-install-action@v22
        with:
          nix_on_tmpfs: true
          nix_conf: |
            experimental-features = nix-command flakes
            access-tokens = ${{ secrets.access-tokens }}
            ${{inputs.nix_conf}}
          nix_version: ${{inputs.nix_version}}
      - name: Pre-evaluation script
        run: ${{inputs.pre_evaluation_script}}
      - name: Find builds
        id: find-builds
        run: |
          set -eo pipefail
          flake_json="$(mktemp)"
          # For Nix >= 2.14 we need --all-systems
          if [[ "${{inputs.nix_version}}" =~ 2.1[456789].* ]]; then
            all_systems="--all-systems"
          else
            all_systems=""
          fi
          nix flake show "./${{inputs.flake_directory}}" $all_systems --json > "$flake_json"
          jq < "$flake_json" -rc '{checks: (.checks // {}), packages: (.packages // {}), devShells: (.devShells // {})}|to_entries|map(.key as $top_attr | .value|to_entries|map(.key as $sys | .value|to_entries|map(.key as $attr | {name: "", description: "", top_attr: $top_attr, system: $sys, attr: $attr} + .value)))|flatten|map(select(${{inputs.filter_builds}}))|map(. as $x | (${{inputs.label_builds}}) as $l | $x + {label: $l})|"builds=\(.)"' >> "$GITHUB_OUTPUT"

  build:
    name: ${{matrix.build.label}}
    needs: eval-flake
    runs-on: ubuntu-latest
    strategy:
      fail-fast: ${{ inputs.fail_fast }}
      matrix:
        build: ${{fromJSON(needs.eval-flake.outputs.builds)}}
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: ${{ inputs.lfs }}
      - uses: nixbuild/nix-quick-install-action@v22
        with:
          nix_on_tmpfs: true
          nix_conf: |
            experimental-features = nix-command flakes
            access-tokens = ${{ secrets.access-tokens }}
            ${{inputs.nix_conf}}
      - uses: nixbuild/nixbuild-action@968e447093b702c0ab3e78d53eea1c38da1b1d0a
        with:
          nixbuild_token: ${{secrets.nixbuild_token}}
          caches: ${{inputs.caches}}
          reuse-build-failures: ${{inputs.reuse-build-failures}}
          reuse-build-timeouts: ${{inputs.reuse-build-timeouts}}

      - name: Pre-build script
        run: ${{inputs.pre_build_script}}

      - name: "Build ${{matrix.build.top_attr}}.${{matrix.build.system}}.${{matrix.build.attr}}"
        id: build
        run: |
          touch build.json

          echo "Disk usage before"
          echo $(df -h)

          attempt=0
          minutes=1
          while [ $attempt -lt 10 ]
            do
            # Runs a build with remote store or (else) just remote builders
            if [[ ${{ inputs.remote_store }} = true ]]; then
              echo "building in remote store"
              nix build "./${{inputs.flake_directory}}#${{matrix.build.top_attr}}.${{matrix.build.system}}.${{matrix.build.attr}}" \
                --print-build-logs \
                --eval-store auto \
                --store ssh-ng://eu.nixbuild.net \
                --builders "" --max-jobs 2 \
                --json > build.json \
                2> >(tee build.log >&2) || true
            else
              echo "building without remote store"
              nix build "./${{inputs.flake_directory}}#${{matrix.build.top_attr}}.${{matrix.build.system}}.${{matrix.build.attr}}" \
                --print-build-logs \
                --json > build.json \
                2> >(tee build.log >&2) || true
            fi 

            # If build did not fail due to broken pipe, break and continue.
            # If build.json exists, the build completed.
            if ! grep -q "client_loop: send disconnect: Broken pipe" build.log || [ -s build.json ]
            then
              echo "No broken pipe, ending attempts"
              break
            fi

            attempt=$((attempt + 1)) # Increment attempt

            if [ $attempt -lt 10 ]
            then
              echo "Broken pipe detected! Will try again in $minutes minutes."
              sleeptime=$((minutes * 60)) # Convert to seconds
              minutes=$((minutes + 1)) # Increase delay
              sleep $sleeptime
            else
              echo "Attempts exceeded, job failing"
            fi
          done

          echo "Disk usage after"
          echo $(df -h)

          echo "Attempts: $attempt"

          status=0
          if ! [ -s build.json ]; then
            echo '[{"success":false}]' > build.json
            if [ "${{ inputs.ignore_build_failures }}" == "true" ]; then
              echo "::error title=${{matrix.build.top_attr}}.${{matrix.build.system}}.${{matrix.build.attr}}::Build failed"
            else
              status=1
            fi
          fi

          jq -c '{success: true, name: "${{matrix.build.name}}", description: "${{matrix.build.description}}", label: "${{matrix.build.label}}"} + .[0] | {"${{matrix.build.top_attr}}": {"${{matrix.build.system}}": {"${{matrix.build.attr}}": .}}}' build.json > result.json

          # Generate a valid artifact name
          ARTIFACT_NAME="$(echo "${{matrix.build.top_attr}}.${{matrix.build.system}}.${{matrix.build.attr}}" | tr '":<>|*?\\/' '_')"
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> "$GITHUB_ENV"

          exit "$status"

      - name: Upload result
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: "${{ env.ARTIFACT_NAME }}"
          path: |
            result.json
            build.log


  summary:
    name: "Summary"
    needs: build
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.merge.outputs.success }}
      results: ${{ steps.merge.outputs.results }}
    steps:
      - id: download
        uses: actions/download-artifact@v3
        with:
          path: ~/results
      - id: merge
        run: |
          jq -rcs 'reduce .[] as $x ({}; . * $x)|"results=\(.)"' \
            "${{steps.download.outputs.download-path}}"/*/result.json \
            >> "$GITHUB_OUTPUT"
          if jq -s '..|.success?|select(if . == false then ""|halt_error(1) else false end)' "${{steps.download.outputs.download-path}}"/*/result.json; then
            echo "success=true" >> "$GITHUB_OUTPUT"
          else
            echo "success=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Generate nixbuild.net summary
        if: ${{ always() && inputs.generate_build_summary }}
        uses: nixbuild/nixbuild-action@968e447093b702c0ab3e78d53eea1c38da1b1d0a
        with:
          nixbuild_token: ${{secrets.nixbuild_token}}
          generate_summary_for: 'workflow'
